load "msh3"
load "iovtk"
verbosity = 0;

//domain 
real h = 12, w=20;
real dn = 0.5;

border inlet(t=h/2, -h/2){x=-w/2; y=t; label=1;} 
border outlet(t=-h/2, h/2){x=w/2; y=t; label=2;} 
border top(t=w/2, -w/2){x=t; y=h/2; label=3;}
border bottom(t=-w/2, w/2){x=t; y=-h/2; label=4;}
border cyl(t=0, 2*pi){x=0.5*cos(t); y=0.5*sin(t); label=5;}
mesh Th = buildmesh(inlet(h/dn) + bottom(w/dn) + outlet(h/dn) + top(w/dn) + cyl(-50));
plot(Th,wait=1);
// Labels
// Inlet : 1
// Outlet : 2
// Top : 3
// Bottom: 4
// Cylinder: 5

//Variables
fespace Vh(Th,P2);
Vh u1,u2; //Velocity Components
Vh v1,v2; //Velocity test function
Vh un1, un2;
Vh p; //Pressure variable
Vh q; //Pressure test function
Vh pn;

real dt = 0.01; // dt: time step 
int i, n = 150;  // n: Total number of time steps
real t;

real Eps=1e-9; //Tolerance
int[int] Order = [1, 1];
string DataName = "Velocity Pressure";
real T0 = clock(); //start time
real Beta = 1e-9;
real err = 0;
real H, m, s;
fespace Vh1(Th,[P2,P2]);
Vh1 [normalappx,normalappy],[w1,w2];
solve bdryn([normalappx,normalappy],[w1,w2])
=int1d(Th)(w1*normalappx+w2*normalappy)
-int1d(Th)(w1*N.x+w2*N.y)
+int2d(Th)(1.e-8*(w1*normalappx+w2*normalappy));

macro grad(u) [dx(u), dy(u)]//
macro UGrad(un, u) ((un#1)*grad(u#1) + (un#2)*grad(u#2))//
macro con(un,dt) [convect([un#1,un#2],-dt,un#1),convect([un#1,un#2],-dt,un#2)]//
macro div(u) (dx(u#1) + dy(u#2))//

//initialize the error file
{
   ofstream file("./2D/IB/err.csv");
   file << "Iteration,Error"<<endl;
   file.flush;
}

ofstream file("./2D/IB/err.csv", append);

while(i<=n){ //time loop
   //velocity at nth time step
   un1 = u1; un2 = u2; pn = p;

   solve GE([u1,u2,p],[v1,v2,q])
   =int2d(Th)
   ([u1,u2]'*[v1,v2]/dt
   -div(v)*p
   -div(u)*q
   -Beta*p*q/dt
   )
   +int2d(Th)(
   -(con(un,dt)'*[v1,v2])/dt
   +Beta*pn*q/dt   
   )
   +on(1, u1=1, u2=0)
   +int1d(Th,qft=qf1pTlump,5)(1e10*(u1*normalappx+u2*normalappy)*(v1*normalappx+v2*normalappy))
   +int1d(Th,qfe=qf1pE,5)(1e10*(u1*N.x+u2*N.y)*(v1*N.x+v2*N.y))
   +on(3, u2=0)
   +on(4, u2=0);

   t = clock()-T0; H = t/3600; m = (H - floor(H))*60; s = (m-floor(m))*60;
   err = sqrt(int2d(Th)(square(u1-un1)+square(u2-un2))/Th.area);

   cout << "Iteration: " << i <<endl;
   cout << "Time Elapsed: " <<floor(H)<<" Hrs:"<<floor(m)<<" Mins:"<<floor(s)<<" s"<< endl;
   cout << "Error: " << err <<endl;
   file << i << "," << err <<endl;
   file.flush;
   if (err<=1e-6){
      break;
   }

   i++;
}

savevtk("./2D/IB/visu"+i+".vtu", Th, [u1,u2], p, dataname=DataName, order=Order); //saves the vtk file
cout << "Visualization file saved ! Simulation completed." <<endl;
